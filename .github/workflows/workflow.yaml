name: Record Homework Execution

# How the workflow is triggered:
# - workflow_dispatch allows you to run it manually from the Actions tab in GitHub
on:
  workflow_dispatch:
  # You could also trigger on push, pull request, etc.
  # push:
  #   branches: [ main ]

jobs:
  record_and_run:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install dependencies (xvfb, ffmpeg, and homework deps)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb ffmpeg xdotool # Added xdotool for potential interaction/focus
          # Add any other dependencies your homework needs here
          # sudo apt-get install -y python3-pip nodejs etc...

      - name: Start Virtual Framebuffer (Xvfb)
        run: |
          Xvfb :99 -screen 0 1280x720x24 & # Start xvfb on display :99 with 1280x720 resolution
          echo "DISPLAY=:99" >> $GITHUB_ENV # Export DISPLAY for subsequent steps

      - name: Start Screen Recording (ffmpeg)
        run: |
          VIDEO_FILENAME="homework-recording-$(date +%Y%m%d-%H%M%S).mp4"
          echo "VIDEO_FILENAME=${VIDEO_FILENAME}" >> $GITHUB_ENV # Make filename available to other steps
          ffmpeg -video_size 1280x720 -framerate 25 -f x11grab -i :99.0 \
                 -codec:v libx264 -preset ultrafast -pix_fmt yuv420p \
                 "$VIDEO_FILENAME" & # Start ffmpeg in the background
          echo $! > ffmpeg.pid # Save ffmpeg's process ID to stop it later
          sleep 5 # Give ffmpeg a moment to start up

      - name: Run Homework Steps
        env:
           # Ensure DISPLAY is set if any GUI apps are launched directly
           DISPLAY: :99
        run: |
          echo "Starting homework execution..."
          # ------------------------------------------------------------
          # ---- REPLACE THE FOLLOWING LINES WITH YOUR ACTUAL HOMEWORK COMMANDS ----
          # Example: If your homework is a script:
          # chmod +x ./homework_script.sh
          # ./homework_script.sh

          # Example: If it involves multiple commands:
          echo "Step 1: Doing something..."
          sleep 5 # Simulate work
          # Maybe launch a simple GUI app if needed for testing recording:
          # sudo apt-get install -y x11-apps
          # xterm & # Launch a terminal IN the virtual display
          # sleep 2
          # xdotool type "echo 'Hello from xterm!'" # Type into the focused window (likely xterm)
          # xdotool key Return
          # sleep 5
          # pkill xterm || true # Close the test terminal

          echo "Step 2: Doing something else..."
          sleep 5 # Simulate more work

          echo "Homework finished."
          # ---- END OF HOMEWORK COMMANDS ----
          # ------------------------------------------------------------

      - name: Stop Screen Recording
        run: |
          echo "Stopping screen recording..."
          # Send SIGINT to ffmpeg for graceful shutdown
          kill -SIGINT $(cat ffmpeg.pid) || echo "ffmpeg already stopped."
          # Wait a bit for ffmpeg to finalize the video file
          sleep 10

      - name: Stop Virtual Framebuffer (Xvfb)
        # This often isn't strictly necessary as the runner environment cleans up,
        # but it's good practice. Run even if prior steps failed.
        if: always()
        run: |
          echo "Stopping Xvfb..."
          pkill Xvfb || echo "Xvfb already stopped."

      - name: Upload Screen Recording Artifact
        # Run even if homework steps failed, so you might capture error states
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screen-recording
          path: ${{ env.VIDEO_FILENAME }} # Upload the generated video file
          if-no-files-found: error # Optional: Fail if video wasn't created
